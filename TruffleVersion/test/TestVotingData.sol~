pragma solidity ^0.5.0;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/VotingData.sol";
import "../contracts/VotingLogic.sol";


contract TestVotingContracts {
 // The address of the CompanyManagementData contract to be tested
 VotingData vd = VotingData(DeployedAddresses.VotingData());

 // The address of the CompanyManagementLogic contract to be tested
 VotingLogic vl = VotingLogic(DeployedAddresses.VotingLogic());

// Testing the companyManagement connections function
function testAreVotingContractsConnected() public {	
	 //The expected data address of vl
	 address currentDataAddress = vl.getContractDataAddress();
	Assert.equal(currentDataAddress, address(vd), "VotingData Address should be pointed at by the VotingLogic contract.");

}

// Testing that the owner of the companyManagementData contract is the logic contract
function testDataContractOwner() public {
  	address currentOwner = vd.getOwner();	
	Assert.equal(currentOwner, address(vl), "VotingLogic contract should be the owner of the VotingData contract.");

}

//Testing that the companyData address is stored in the VotingData contract
function testCompanyDataLinked() public {
  	address currentCompanyData = vd.getLinkedCompany();	
	Assert.equal(currentCompanyData, DeployedAddresses.CompanyData(), "The CompanyData contract address should be stored in the VotingData contract.");

}

//test investorManagementData in VotingLogic
function testinvestorManagementDataLinked() public {
  	address currentInvestorManagementData = vl.getCurrentInvestorDataAddress();	
	Assert.equal(currentInvestorManagementData, DeployedAddresses.InvestorManagementData(), "The CompanyData contract address should be stored in the VotingData contract.");

}

}
